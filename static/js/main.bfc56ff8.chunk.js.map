{"version":3,"sources":["components/line-chart.js","utils/set-diff.js","utils/data-format.js","App.js","serviceWorker.js","index.js"],"names":["distinguishableColors","CoronaChart","props","renderCustomizedLegend","payload","currentCountry","countryHeader","className","style","marginBottom","map","entry","country","dataKey","color","label","inActive","state","disabled","includes","onClick","handleClick","marginRight","width","height","cx","cy","type","size","fill","checked","scale","this","setState","filter","obj","concat","forceUpdate","dataPoints","data","handleOptionChange","id","name","value","margin","top","right","left","bottom","chartLines","chartLine","connectNulls","toLowerCase","stroke","yAxisId","dot","r","textAnchor","tick","angle","fontSize","padding","yLabelPrioritizedKeys","domain","allowDataOverflow","formatter","itemSorter","item","filterNull","wrapperStyle","borderColor","boxShadow","contentStyle","backgroundColor","labelStyle","fontWeight","align","content","a","b","countries","prevCountries","prev","Set","current","removedCountries","x","has","i","length","push","splice","indexOf","removed","removedCountry","pop","maxPerDataKey","Object","keys","key","sort","sorted","calcPrioritizedKeys","Component","formatStringToNumberOrNull","strigWithNumber","Number","initialCountries","parseData","input","newExtraction","dataPerLine","String","split","header","firstDataPointPerPlace","line","date","place","newCases","newDeaths","totalCases","totalDeaths","dateFormatted","Date","toISOString","substring","currentData","values","localeCompare","customStyles","option","provided","isSelected","App","selectableCountries","currentCountries","multiCountryData","newParsed","newParsedData","multiData","includeDataPointsGoingForward","dataPoint","filteredDataPoint","axios","get","res","parsed","labels","getData","href","isMulti","options","onChange","_onChange","defaultValue","styles","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"+XAeMA,EAAwB,CAC5B,UACA,UACA,UACA,UACA,UACA,UACA,UACA,UACA,UACA,UACA,UACA,UACA,UACA,UACA,UACA,UACA,UACA,UACA,UACA,UACA,UACA,UACA,UACA,WA8OaC,E,YA3Mb,WAAYC,GAAQ,IAAD,8BACjB,4CAAMA,KAoBRC,uBAAyB,YAAkB,IAAfC,EAAc,EAAdA,QACtBC,EAAiB,GACjBC,EAAgB,KACpB,OACE,yBAAKC,UAAU,oBAAoBC,MAAO,CAACC,aAAc,KACtDL,EAAQM,KAAI,SAAAC,GACPN,IAAmBM,EAAMC,SAC3BP,EAAiBM,EAAMC,QACvBN,EACA,0BAAMC,UAAU,kBACd,6BACCI,EAAMC,QACP,+BAGFN,EAAgB,KAVE,IAYZO,EAA0BF,EAA1BE,QAASC,EAAiBH,EAAjBG,MAAOC,EAAUJ,EAAVI,MAClBC,EAAW,EAAKC,MAAMC,SAASC,SAASN,GAM9C,OACC,8BACEP,EACD,0BACEc,QAAS,kBAAM,EAAKC,YAAYR,IAChCL,MAVU,CACZc,YAAa,GACbR,MAAO,SAUL,kBAAC,IAAD,CAASS,MAAO,GAAIC,OAAQ,GAAIhB,MAAO,CAACC,cAAe,IACrD,kBAAC,IAAD,CAASgB,GAAI,GAAIC,GAAI,GAAIC,KAAK,SAASC,KAAM,GAAIC,KAAMf,KAEzD,2BAAOa,KAAK,WAAWG,SAAUd,IACjC,0BAAMT,UAAU,sBAAsBQ,UAtDhD,EAAKE,MAAQ,CAACc,MAAO,UAFJ,E,yEAKPlB,GACNmB,KAAKf,MAAMC,SAASC,SAASN,GAC/BmB,KAAKC,SAAS,CAACf,SAAUc,KAAKf,MAAMC,SAASgB,QAAO,SAAAC,GAAG,OAAIA,IAAQtB,OAEnEmB,KAAKC,SAAS,CAAEf,SAAUc,KAAKf,MAAMC,SAASkB,OAAOvB,O,yCAKtCkB,GACjBC,KAAKC,SAAS,CACZF,UAEFC,KAAKK,gB,+BAsGG,IAAD,OACCC,EAAeN,KAAK9B,MAApBoC,WAER,IAAKA,EACH,OAAO,KAGT,IAAMC,EAAOD,EAEb,OACE,6BACE,6BACE,0BACElB,QAAS,kBAAM,EAAKoB,mBAAmB,YACvC,2BAAOb,KAAK,QAAQc,GAAG,SAASC,KAAK,QAAQC,MAAM,SAASb,QAA8B,WAArBE,KAAKf,MAAMc,QAChF,0BAAMvB,MAAO,CAACM,MAAO,SAArB,WAEF,0BACEM,QAAS,kBAAM,EAAKoB,mBAAmB,SACvC,2BAAOb,KAAK,QAAQc,GAAG,MAAMC,KAAK,QAAQC,MAAM,MAAMb,QAA8B,QAArBE,KAAKf,MAAMc,QAC1E,0BAAMvB,MAAO,CAACM,MAAO,SAArB,SAGN,kBAAC,IAAD,CAAqBU,OAAQ,IAAKjB,UAAU,mBAC1C,kBAAC,IAAD,CACEgB,MAAO,IACPC,OAAQ,IACRe,KAAMA,EACNK,OAAQ,CAAEC,IAAK,GAAIC,MAAO,GAAIC,KAAM,GAAIC,OAAQ,KAG9ChB,KAAKf,MAAMgC,WAAWf,QAAO,SAAAgB,GAAS,OAAK,EAAKjC,MAAMC,SAASC,SAAS+B,EAAUrC,YAAUH,KAAI,SAAAwC,GAAS,OACvG,kBAAC,IAAD,CACAC,cAAY,EACZT,KAAI,UAAKQ,EAAUtC,QAAf,YAA0BsC,EAAUnC,MAAMqC,eAC9CzB,KAAK,WACLd,QAASqC,EAAUrC,QACnBwC,OAAQH,EAAUpC,MAClBwC,QAAS,EACTC,IAAK,CAACC,EAAG,QAIb,kBAAC,IAAD,CACE3C,QAAQ,OACR4C,WAAW,MACXC,KAAM,CAAEC,OAAQ,GAAIC,SAAU,IAC9BpC,OAAQ,IACRqC,QAAS,CAACf,MAAO,EAAGC,KAAM,KAG5B,kBAAC,IAAD,CACElC,QAASmB,KAAKf,MAAM6C,sBAAsB5B,QAAO,SAAArB,GAAO,OAAK,EAAKI,MAAMC,SAASC,SAASN,MAAU,GACpGkD,OAA6B,QAArB/B,KAAKf,MAAMc,MAAkB,CAAC,EAAG,WAAa,CAAC,EAAG,WAC1D2B,KAAM,CAAEE,SAAU,IAClBrC,MAAO,GACPQ,MAAOC,KAAKf,MAAMc,MAClBiC,mBAAiB,EACjBH,QAAS,CAAChB,IAAK,EAAGG,OAAQ,IAP5B,MAYA,kBAAC,IAAD,CACEiB,UAAW,SAACtB,GAAD,OAAsB,OAAVA,EAAkB,EAAIA,GAC7CuB,WAAY,SAACC,GAAD,OAAWA,EAAKxB,OAC5ByB,YAAY,EACZC,aAAc,CACZC,YAAa,QACbC,UAAW,sCAEbC,aAAc,CAAEC,gBAAiB,4BACjCC,WAAY,CAAEC,WAAY,OAAQ7D,MAAO,aAE3C,kBAAC,IAAD,CAAQuD,aAAc,CAACxB,IAAK,KAAM+B,MAAM,SAASpD,OAAQ,IAAKqD,QAAS7C,KAAK7B,uBAC1EC,QAAS4B,KAAKf,MAAMgC,mB,gDAlIE/C,EAAOe,GAAQ,IC3InB6D,EAAGC,ED4IrBzC,EAA0BpC,EAA1BoC,WAAY0C,EAAc9E,EAAd8E,UACpB,IAAK1C,GAAcrB,EAAMgE,gBAAkBD,EACzC,OAAO,KAGT,GAAI/D,EAAMgE,cAAe,CAOvB,IANA,IAAMC,EAAO,IAAIC,IAAIlE,EAAMgE,eACrBG,EAAU,IAAID,IAAIH,GAElBK,GCrJkBP,EDqJeI,ECrJZH,EDqJkBK,ECrJZ,IAAID,IAAI,YAAIL,GAAG5C,QAAO,SAAAoD,GAAC,OAAKP,EAAEQ,IAAID,QDwJ1DE,EAAIvE,EAAMgC,WAAWwC,OAAS,EAAGD,GAAK,EAAGA,IAC5CH,EAAiBE,IAAItE,EAAMgC,WAAWuC,GAAG5E,WAC3CZ,EAAsB0F,KAAKzE,EAAMgC,WAAWuC,GAAG1E,OAC/CG,EAAMgC,WAAW0C,OAAO1E,EAAMgC,WAAW2C,QAAQ3E,EAAMgC,WAAWuC,IAAK,IAK3E,IAAK,IAAIA,EAAIvE,EAAMC,SAASuE,OAAS,EAAGD,GAAK,EAAGA,IAAK,CACnD,IAAIK,GAAU,EADqC,uBAEnD,YAA6BR,EAA7B,+CAA+C,CAAC,IAArCS,EAAoC,QACzC7E,EAAMC,SAASsE,GAAGrE,SAAS2E,KAC7BD,GAAU,IAJqC,kFAO/CA,GACF5E,EAAMC,SAASyE,OAAO1E,EAAMC,SAAS0E,QAAQ3E,EAAMC,SAASsE,IAAK,IAKvE,IAAMvC,EAAahC,EAAMgC,YAAc,GACjC/B,EAAWD,EAAMC,UAAY,GAnCS,uBAoC5C,YAAsB8D,EAAtB,+CAAiC,CAAC,IAAvBpE,EAAsB,UAC1BK,EAAMgE,eAAkBhE,EAAMgE,gBAAkBhE,EAAMgE,cAAc9D,SAASP,MAChFqC,EAAWyC,KAAK,CAAE9E,UAASC,QAAQ,WAAD,OAAaD,GAAWE,MAAOd,EAAsB+F,MAAOhF,MAAM,cACpGkC,EAAWyC,KAAK,CAAE9E,UAASC,QAAQ,YAAD,OAAcD,GAAWE,MAAOd,EAAsB+F,MAAOhF,MAAM,eACrGkC,EAAWyC,KAAK,CAAE9E,UAASC,QAAQ,aAAD,OAAeD,GAAWE,MAAOd,EAAsB+F,MAAOhF,MAAM,gBACtGkC,EAAWyC,KAAK,CAAE9E,UAASC,QAAQ,cAAD,OAAgBD,GAAWE,MAAOd,EAAsB+F,MAAOhF,MAAM,iBACvGG,EAASwE,KAAT,oBAA2B9E,IAC3BM,EAASwE,KAAT,qBAA4B9E,MA3CY,kFA+C5C,IAAMkD,EAhJkB,SAACxB,EAAY0C,GACvC,IAAMgB,EAAgB,GAD+B,uBAErD,YAAsBhB,EAAtB,+CAAiC,CAAC,IAAvBpE,EAAsB,QAC/BoF,EAAc,WAAD,OAAYpF,IAAa,EACtCoF,EAAc,aAAD,OAAcpF,IAAa,EACxCoF,EAAc,cAAD,OAAepF,IAAa,EACzCoF,EAAc,YAAD,OAAapF,IAAa,EAJR,2BAK/B,YAAoB0B,EAApB,+CAAgC,CAAC,IAAtB3B,EAAqB,QAC1BA,EAAM,WAAD,OAAYC,IAAaoF,EAAc,WAAD,OAAYpF,MACzDoF,EAAc,WAAD,OAAYpF,IAAaD,EAAM,WAAD,OAAYC,KAErDD,EAAM,aAAD,OAAcC,IAAaoF,EAAc,aAAD,OAAcpF,MAC7DoF,EAAc,aAAD,OAAcpF,IAAaD,EAAM,aAAD,OAAcC,KAEzDD,EAAM,cAAD,OAAeC,IAAaoF,EAAc,cAAD,OAAepF,MAC/DoF,EAAc,cAAD,OAAepF,IAAaD,EAAM,cAAD,OAAeC,KAE3DD,EAAM,YAAD,OAAaC,IAAaoF,EAAc,YAAD,OAAapF,MAC3DoF,EAAc,YAAD,OAAapF,IAAaD,EAAM,YAAD,OAAaC,MAhB9B,oFAFoB,kFA4BrD,OANmBqF,OAAOC,KAAKF,GAAetF,KAAI,SAAAyF,GAChD,MAAO,CAACA,MAAKxD,MAAOqD,EAAcG,OAEjCC,MAAK,SAACtB,EAAGC,GACV,OAAOA,EAAEpC,MAAQmC,EAAEnC,SAEHjC,KAAI,SAAA2F,GAAM,OAAIA,EAAOF,OAoHPG,CAAoBhE,EAAY0C,GAE9D,MAAO,CACL/B,aAAY/B,WAAU+D,cAAeD,EAAWlB,6B,GApH5ByC,aEzEbC,EAA6B,SAACC,GACzC,OAAmC,IAA5BC,OAAOD,GAAyB,KAAOC,OAAOD,I,SCQjDE,EAAmB,CAAC,CAAChE,MAAO,QAAS5B,MAAO,SAAU,CAAC4B,MAAO,QAAS5B,MAAO,UAE9E6F,EAAY,SAACC,GACjB,IAAMC,EAAgB,GAChB9B,EAAY,GACZ+B,EAAcC,OAAOH,GAAOI,MAAM,MACpCC,GAAS,EACPC,EAAyB,GALJ,uBAM3B,YAAmBJ,EAAnB,+CAAgC,CAAC,IAAtBK,EAAqB,QAC9B,GAAIF,EACFA,GAAS,MADX,CAD8B,MAKsCE,EAAKH,MAAM,KALjD,mBAKvBI,EALuB,KAKjBC,EALiB,KAKVC,EALU,KAKAC,EALA,KAKWC,EALX,KAKuBC,EALvB,KAM9B,GAAKJ,EAAL,CAIA,GADAtC,EAAUsC,IAAS,GACdH,EAAuBG,GAAQ,CAClC,GAAyB,IAArBZ,OAAOa,IACe,IAAtBb,OAAOc,IACgB,IAAvBd,OAAOe,IACiB,IAAxBf,OAAOgB,GACT,SAEAP,EAAuBG,IAAS,EAGpC,IAAMK,EAAgB,IAAIC,KAAKP,GAAMQ,cAAcC,UAAU,EAAE,IAC/D,GAAKhB,EAAca,GAQZ,CAAC,IAAD,EACCI,EAAcjB,EAAca,GAClCb,EAAca,GAAd,kDACcL,GAAUd,EAA2Be,IADnD,iCAEeD,GAAUd,EAA2BgB,IAFpD,kCAGgBF,GAAUd,EAA2BiB,IAHrD,mCAIiBH,GAAUd,EAA2BkB,IAJtD,GAKKK,OAf4B,CAAC,IAAD,EACjCjB,EAAca,IAAd,GACEN,KAAMM,GADR,gCAEcL,GAAUd,EAA2Be,IAFnD,iCAGeD,GAAUd,EAA2BgB,IAHpD,kCAIgBF,GAAUd,EAA2BiB,IAJrD,mCAKiBH,GAAUd,EAA2BkB,IALtD,OA5BuB,kFAoD3B,MAAO,CAJYzB,OAAO+B,OAAOlB,GAAeV,MAAK,SAACtB,EAAGC,GACvD,OAAOD,EAAEuC,KAAKY,cAAclD,EAAEsC,SAGZpB,OAAOC,KAAKlB,KAG5BkD,EAAe,CACnBC,OAAQ,SAACC,EAAUnH,GAAX,sBACHmH,EADG,CAENtH,MAAOG,EAAMoH,WAAa,SAAW,YA4E1BC,E,2MAvEbrH,MAAQ,CACNsH,oBAAqB5B,EACrB6B,iBAAkB7B,G,gHAGN3B,G,8GACPA,E,uBACHhD,KAAKC,SAAS,CAACuG,iBAAkB,GAAIC,iBAAkB,O,6BAGnDC,EAAY1G,KAAKf,MAAM0H,cACzBC,EAAY,IACZ5D,E,iBAEE6D,GAAgC,E,MACZ5C,OAAO+B,OAAOU,G,yCAA3BI,E,oCACa9D,E,sEAAXpE,E,SACLkI,EAAU,WAAD,OAAYlI,EAAQ+B,Q,wBAC/BkG,GAAgC,E,wSAIhCA,E,iBAEF,IADME,EAAoB,G,6BAC1B,EAAsB/D,EAAtB,+CAAWpE,EAAsB,QAC/BmI,EAAkB,WAAD,OAAYnI,EAAQ+B,QAAWmG,EAAU,WAAD,OAAYlI,EAAQ+B,SAAY,KACzFoG,EAAkB,YAAD,OAAanI,EAAQ+B,QAAWmG,EAAU,YAAD,OAAalI,EAAQ+B,SAAY,KAC3FoG,EAAkB,aAAD,OAAcnI,EAAQ+B,QAAWmG,EAAU,aAAD,OAAclI,EAAQ+B,SAAY,KAC7FoG,EAAkB,cAAD,OAAenI,EAAQ+B,QAAWmG,EAAU,cAAD,OAAelI,EAAQ+B,SAAY,K,0OAEjGoG,EAAiB,KAAWD,EAAS,KACrCF,EAAUlD,KAAKqD,G,mCAKrB/G,KAAKC,SAAS,CAACuG,iBAAkBxD,EAAWyD,iBAAkBG,I,kVAK5CI,IAAMC,IAAN,UA3GL,+F,cA2GPC,E,SACsBtC,EAAUsC,EAAI3G,M,mBAAnC4G,E,KAAQnE,E,KACToE,EAASpE,EAAUtE,KAAI,SAAAyF,GAAG,MAAK,CAACxD,MAAOwD,EAAKpF,MAAOoF,MACzDnE,KAAKC,SAAS,CAACsG,oBAAqBa,EAAQT,cAAeQ,I,SACrDnH,KAAKqH,QAAQ1C,G,+KAGL3B,G,iFACRhD,KAAKqH,QAAQrE,G,sIAGX,IAAD,SAC6DhD,KAAKf,MAAjEsH,EADD,EACCA,oBAAqBC,EADtB,EACsBA,iBAAkBC,EADxC,EACwCA,iBAC/C,OACE,yBAAKlI,UAAU,OACb,yBAAKA,UAAU,YAAf,mBAA0C,uBAAG+I,KAAK,8CAAR,WAC1C,yBAAK/I,UAAU,aAAf,qBAA6C,uBAAG+I,KAAK,yCAAR,QAA7C,UAA4G,uBAAGA,KAAK,gDAAR,cAC5G,4BAAQ/I,UAAU,cAChB,yBAAKC,MAAO,CAACe,MAAO,QAClB,kBAAC,IAAD,CAAQgI,SAAO,EAACC,QAASjB,EAAqBkB,SAAU,SAAA5C,GAAK,OAAI,EAAK6C,UAAU7C,IAAQ8C,aAAchD,EAAkBiD,OAAQ1B,EAAcvF,MAAO6F,KAEvJ,yBAAKhI,MAAO,CAACe,MAAO,MAAOC,OAAQ,QACjC,kBAAC,EAAD,CAAac,WAAYmG,EAAkBzD,UAAWwD,EAAiB9H,KAAI,SAAAE,GAAO,OAAIA,EAAQ+B,kB,GAhExF4D,aC7DEsD,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MAAM,2DCXnCC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SDsH3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.bfc56ff8.chunk.js","sourcesContent":["import React, { Component } from \"react\";\nimport { setDifference } from \"../utils/set-diff\";\nimport {\n  Legend,\n  Label,\n  Line,\n  LineChart,\n  ResponsiveContainer,\n  Surface, \n  Symbols,\n  Tooltip,\n  XAxis,\n  YAxis\n} from \"recharts\";\n\nconst distinguishableColors = [\n  '#426600',\n  '#FF0010',\n  '#990000',\n  '#E0FF66',\n  '#FFFF80',\n  '#F0A3FF',\n  '#993F00',\n  '#005C31',\n  '#2BCE48',\n  '#FFCC99',\n  '#808080',\n  '#94FFB5',\n  '#8F7C00',\n  '#FFA405',\n  '#5EF1F2',\n  '#9DCC00',\n  '#FFFFFF', \n  '#C20088',\n  '#FFA8BB',\n  '#0075DC',\n  '#00998F',\n  '#740AFF',\n  '#FFFF00',\n  '#FF5005'\n]\n\nconst calcPrioritizedKeys = (dataPoints, countries) => {\n  const maxPerDataKey = {}\n  for (const country of countries) {\n    maxPerDataKey[`newCases${country}`] = 0\n    maxPerDataKey[`totalCases${country}`] = 0\n    maxPerDataKey[`totalDeaths${country}`] = 0\n    maxPerDataKey[`newDeaths${country}`] = 0\n    for (const entry of dataPoints) {\n      if (entry[`newCases${country}`] > maxPerDataKey[`newCases${country}`]) {\n        maxPerDataKey[`newCases${country}`] = entry[`newCases${country}`]\n      }\n      if (entry[`totalCases${country}`] > maxPerDataKey[`totalCases${country}`]) {\n        maxPerDataKey[`totalCases${country}`] = entry[`totalCases${country}`]\n      }\n      if (entry[`totalDeaths${country}`] > maxPerDataKey[`totalDeaths${country}`]) {\n        maxPerDataKey[`totalDeaths${country}`] = entry[`totalDeaths${country}`]\n      }\n      if (entry[`newDeaths${country}`] > maxPerDataKey[`newDeaths${country}`]) {\n        maxPerDataKey[`newDeaths${country}`] = entry[`newDeaths${country}`]\n      }\n    }\n  }\n  const sortedKeys = Object.keys(maxPerDataKey).map(key => {\n    return {key, value: maxPerDataKey[key]}\n  // Sort descending on value\n  }).sort((a, b) => {\n    return b.value - a.value\n  })\n  return sortedKeys.map(sorted => sorted.key)\n}\n\nclass CoronaChart extends Component {\n  constructor(props) {\n    super(props) \n    this.state = {scale: 'linear'}\n  }\n\n  handleClick(dataKey) {\n    if (this.state.disabled.includes(dataKey)) {\n      this.setState({disabled: this.state.disabled.filter(obj => obj !== dataKey)})\n    } else {\n      this.setState({ disabled: this.state.disabled.concat(dataKey) });\n    }\n  }\n\n\n  handleOptionChange(scale) {\n    this.setState({\n      scale\n    });\n    this.forceUpdate()\n  }\n\n  renderCustomizedLegend = ({ payload }) => {\n    let currentCountry = ''\n    let countryHeader = null\n    return (\n      <div className=\"customized-legend\" style={{marginBottom: 40}}>\n        {payload.map(entry => {\n          if (currentCountry !== entry.country) {\n            currentCountry = entry.country\n            countryHeader = \n            <span className=\"Legend-country\">\n              <br/>\n              {entry.country}\n              <br/>\n            </span>\n          } else {\n            countryHeader = null\n          }\n          const { dataKey, color, label } = entry;\n          const inActive = this.state.disabled.includes(dataKey);\n          const style = {\n            marginRight: 10,\n            color: \"#AAA\",\n          };\n\n          return (\n           <span>\n            {countryHeader}\n            <span\n              onClick={() => this.handleClick(dataKey)}\n              style={style}\n            >\n              <Surface width={20} height={20} style={{marginBottom: -5}}>\n                <Symbols cx={10} cy={10} type=\"circle\" size={50} fill={color} />\n              </Surface>\n              <input type=\"checkbox\" checked={!inActive}/>\n              <span className=\"Legend-per-country\">{label}</span>\n            </span>\n            </span> \n          );\n        })}\n      </div>\n    );\n  };\n\n  static getDerivedStateFromProps(props, state) {\n    const { dataPoints, countries } = props\n    if (!dataPoints || state.prevCountries === countries) {\n      return null\n    }\n\n    if (state.prevCountries) {\n      const prev = new Set(state.prevCountries)\n      const current = new Set(countries)\n  \n      const removedCountries = setDifference(prev, current)\n      // Push the old used colors back into the available pool\n      // Remove chartLines if country no longer selected\n      for (let i = state.chartLines.length - 1; i >= 0; i--) {\n        if (removedCountries.has(state.chartLines[i].country)) {\n          distinguishableColors.push(state.chartLines[i].color)\n          state.chartLines.splice(state.chartLines.indexOf(state.chartLines[i]), 1)\n        }\n      }\n\n      // Remove disabled lengends if country no longer selected\n      for (let i = state.disabled.length - 1; i >= 0; i--) {\n        let removed = false\n        for (const removedCountry of removedCountries) {\n          if (state.disabled[i].includes(removedCountry)) {\n            removed = true\n          }\n        }\n        if (removed) {\n          state.disabled.splice(state.disabled.indexOf(state.disabled[i]), 1)\n        }\n      }\n    }\n    \n    const chartLines = state.chartLines || []\n    const disabled = state.disabled || []\n    for (const country of countries) {\n      if (!state.prevCountries || (state.prevCountries && !state.prevCountries.includes(country))) {\n        chartLines.push({ country, dataKey: `newCases${country}`, color: distinguishableColors.pop(), label: `New cases`})\n        chartLines.push({ country, dataKey: `newDeaths${country}`, color: distinguishableColors.pop(), label: `New deaths`})\n        chartLines.push({ country, dataKey: `totalCases${country}`, color: distinguishableColors.pop(), label: `Total cases`})\n        chartLines.push({ country, dataKey: `totalDeaths${country}`, color: distinguishableColors.pop(), label: `Total deaths`})\n        disabled.push(`totalCases${country}`)\n        disabled.push(`totalDeaths${country}`)\n      }\n    }\n\n    const yLabelPrioritizedKeys = calcPrioritizedKeys(dataPoints, countries)\n\n    return {\n      chartLines, disabled, prevCountries: countries, yLabelPrioritizedKeys\n    }\n  }\n\n\n  render() {\n    const { dataPoints } = this.props\n\n    if (!dataPoints) {\n      return null;\n    }\n    \n    const data = dataPoints\n\n    return (\n      <div>\n        <div>\n          <span\n            onClick={() => this.handleOptionChange(\"linear\")}>\n            <input type=\"radio\" id=\"linear\" name=\"scale\" value=\"linear\" checked={this.state.scale === 'linear'} />\n            <span style={{color: \"#AAA\"}}>Linear</span>\n          </span>\n          <span\n            onClick={() => this.handleOptionChange(\"log\")}>\n            <input type=\"radio\" id=\"log\" name=\"scale\" value=\"log\" checked={this.state.scale === 'log'}/>\n            <span style={{color: \"#AAA\"}}>Log</span>\n          </span>\n        </div>\n      <ResponsiveContainer height={800} className=\"chart-container\">\n        <LineChart\n          width={800}\n          height={800}\n          data={data}\n          margin={{ top: 25, right: 25, left: 40, bottom: 25 }}\n          >\n          {\n            this.state.chartLines.filter(chartLine => !this.state.disabled.includes(chartLine.dataKey)).map(chartLine =>\n              <Line\n              connectNulls\n              name={`${chartLine.country} ${chartLine.label.toLowerCase()}`}\n              type=\"monotone\"\n              dataKey={chartLine.dataKey}\n              stroke={chartLine.color}\n              yAxisId={0}\n              dot={{r: 2}}\n              />\n              )\n            }\n          <XAxis\n            dataKey=\"date\"\n            textAnchor=\"end\"\n            tick={{ angle: -70, fontSize: 20 }}\n            height={225}\n            padding={{right: 3, left: 3}}\n            />\n\n          <YAxis\n            dataKey={this.state.yLabelPrioritizedKeys.filter(dataKey => !this.state.disabled.includes(dataKey))[0]}\n            domain={this.state.scale === 'log' ? [1, 'dataMax'] : [0, 'dataMax']}\n            tick={{ fontSize: 20 }}\n            width={40}\n            scale={this.state.scale}\n            allowDataOverflow\n            padding={{top: 3, bottom: 3}}\n            >\n             {/* <Label value=\"Persons\" angle={-90} position=\"insideBottomLeft\" offset={1} style={{ fontSize: '80%', fill: 'rgba(0, 204, 102, 0.70)' }}></Label> */}\n          />\n          </YAxis>\n          <Tooltip\n            formatter={(value) => (value === null) ? 0 : value}\n            itemSorter={(item) => -item.value}\n            filterNull={false}\n            wrapperStyle={{\n              borderColor: \"white\",\n              boxShadow: \"2px 2px 3px 0px rgb(204, 204, 204)\"\n            }}\n            contentStyle={{ backgroundColor: \"rgba(255, 255, 255, 0.8)\" }}\n            labelStyle={{ fontWeight: \"bold\", color: \"#666666\" }}\n            />\n          <Legend wrapperStyle={{top: 550}} align='center' height={100} content={this.renderCustomizedLegend} \n            payload={this.state.chartLines}/>\n        </LineChart>\n      </ResponsiveContainer>\n    </div>\n    );\n  }\n}\n\nexport default CoronaChart;\n","export const setDifference = (a, b) => new Set([...a].filter(x => !b.has(x)));","export const formatStringToNumberOrNull = (strigWithNumber) => {\n  return Number(strigWithNumber) === 0 ? null : Number(strigWithNumber)\n}","import React, { Component } from \"react\";\nimport \"./App.css\";\nimport axios from \"axios\";\nimport CoronaChart from \"./components/line-chart\";\nimport { formatStringToNumberOrNull } from \"./utils/data-format\";\n\nimport Select from 'react-select';\n\nconst endpoint = \"https://raw.githubusercontent.com/owid/covid-19-data/master/public/data/ecdc/full_data.csv\";\nconst initialCountries = [{value: 'Italy', label: 'Italy'}, {value: 'Spain', label: 'Spain'}]\n\nconst parseData = (input) => {\n  const newExtraction = {}\n  const countries = {}\n  const dataPerLine = String(input).split('\\n')\n  let header = true\n  const firstDataPointPerPlace = {}\n  for (const line of dataPerLine) {\n    if (header) {\n      header = false\n      continue\n    }\n    const [date, place, newCases, newDeaths, totalCases, totalDeaths] = line.split(',')\n    if (!place) {\n      continue\n    }\n    countries[place] = true\n    if (!firstDataPointPerPlace[place]) {\n      if (Number(newCases) === 0 &&\n          Number(newDeaths) === 0 &&\n          Number(totalCases) === 0 &&\n          Number(totalDeaths) === 0) {\n        continue\n      } else {\n        firstDataPointPerPlace[place] = true\n      }\n    }\n    const dateFormatted = new Date(date).toISOString().substring(0,10)\n    if (!newExtraction[dateFormatted]) {\n      newExtraction[dateFormatted] = {\n        date: dateFormatted,\n        [`newCases${place}`]: formatStringToNumberOrNull(newCases),\n        [`newDeaths${place}`]: formatStringToNumberOrNull(newDeaths),\n        [`totalCases${place}`]: formatStringToNumberOrNull(totalCases), \n        [`totalDeaths${place}`]: formatStringToNumberOrNull(totalDeaths)\n      }\n    } else {\n      const currentData = newExtraction[dateFormatted]\n      newExtraction[dateFormatted] = {\n        [`newCases${place}`]: formatStringToNumberOrNull(newCases),\n        [`newDeaths${place}`]: formatStringToNumberOrNull(newDeaths),\n        [`totalCases${place}`]: formatStringToNumberOrNull(totalCases), \n        [`totalDeaths${place}`]: formatStringToNumberOrNull(totalDeaths), \n        ...currentData\n      }\n    }\n  }\n\n  // Resort the data on date\n  const dataPoints = Object.values(newExtraction).sort((a, b) => {\n    return a.date.localeCompare(b.date)\n  })\n\n  return [dataPoints, Object.keys(countries)]\n}\n\nconst customStyles = {\n  option: (provided, state) => ({\n    ...provided,\n    color: state.isSelected ? 'orange' : 'black',\n  })\n}\n\nclass App extends Component {\n  state = {\n    selectableCountries: initialCountries,\n    currentCountries: initialCountries\n  }\n\n  async getData(countries) {\n    if (!countries) {\n      this.setState({currentCountries: [], multiCountryData: null })\n      return\n    }\n    const newParsed = this.state.newParsedData\n    let multiData = []\n    if (countries) {\n      // Build data set with only the selected countries and only after they started getting data\n      let includeDataPointsGoingForward = false\n      for (const dataPoint of Object.values(newParsed)) {\n        for (const country of countries) {\n          if (dataPoint[`newCases${country.value}`]) {\n            includeDataPointsGoingForward = true\n            break\n          }\n        }\n        if (includeDataPointsGoingForward) {\n          const filteredDataPoint = {}\n          for (const country of countries) {\n            filteredDataPoint[`newCases${country.value}`] = dataPoint[`newCases${country.value}`] || null\n            filteredDataPoint[`newDeaths${country.value}`] = dataPoint[`newDeaths${country.value}`] || null\n            filteredDataPoint[`totalCases${country.value}`] = dataPoint[`totalCases${country.value}`] || null\n            filteredDataPoint[`totalDeaths${country.value}`] = dataPoint[`totalDeaths${country.value}`] || null\n          }\n          filteredDataPoint['date'] = dataPoint['date']\n          multiData.push(filteredDataPoint)\n        }\n      }\n    }\n\n    this.setState({currentCountries: countries, multiCountryData: multiData })\n    \n  }\n\n  async componentDidMount() {\n    const res = await axios.get(`${endpoint}`);\n    const [parsed, countries] = parseData(res.data)\n    const labels = countries.map(key => ({value: key, label: key}))\n    this.setState({selectableCountries: labels, newParsedData: parsed})\n    await this.getData(initialCountries);\n  }\n\n  async _onChange(countries) {\n    await this.getData(countries)\n  }\n\n  render() {\n    const { selectableCountries, currentCountries, multiCountryData } = this.state;\n    return (\n      <div className=\"App\">\n        <div className=\"Top-left\">Source code on: <a href=\"https://github.com/mathiastj/corona-graphs\">GitHub</a></div>\n        <div className=\"Top-right\">Sources: ECDC via <a href=\"https://github.com/owid/covid-19-data\">OWID</a> under <a href=\"https://creativecommons.org/licenses/by/4.0/\">CC BY 4.0</a></div>\n        <header className=\"App-header\">\n          <div style={{width: '75%'}}>\n            <Select isMulti options={selectableCountries} onChange={input => this._onChange(input)} defaultValue={initialCountries} styles={customStyles} value={currentCountries}/>\n          </div>\n          <div style={{width: '95%', height: '90%'}}>\n            <CoronaChart dataPoints={multiCountryData} countries={currentCountries.map(country => country.value)}/> \n          </div>\n        </header>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(/^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/)\n)\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href)\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config)\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          )\n        })\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config)\n      }\n    })\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing\n        if (installingWorker == null) {\n          return\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              )\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration)\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.')\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration)\n              }\n            }\n          }\n        }\n      }\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error)\n    })\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type')\n      if (response.status === 404 || (contentType != null && contentType.indexOf('javascript') === -1)) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload()\n          })\n        })\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config)\n      }\n    })\n    .catch(() => {\n      console.log('No internet connection found. App is running in offline mode.')\n    })\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister()\n      })\n      .catch(error => {\n        console.error(error.message)\n      })\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}