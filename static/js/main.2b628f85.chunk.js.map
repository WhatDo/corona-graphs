{"version":3,"sources":["App.js","components/line-chart.js","serviceWorker.js","index.js"],"names":["data","prioritizedDataKeys","CoronaChart","props","renderCustomizedLegend","payload","className","style","marginBottom","map","entry","dataKey","color","label","active","state","disabled","includes","marginRight","onClick","handleClick","width","height","cx","cy","type","size","fill","chartLines","scale","this","setState","filter","obj","concat","forceUpdate","dataPoints","handleOptionChange","id","name","value","checked","margin","top","right","left","bottom","chartLine","connectNulls","stroke","yAxisId","textAnchor","tick","angle","fontSize","padding","domain","allowDataOverflow","formatter","filterNull","wrapperStyle","borderColor","boxShadow","contentStyle","backgroundColor","labelStyle","fontWeight","verticalAlign","content","Component","endpoint","initialCountrySelect","initialCountry","countries","parseData","input","extracted","dataPerLine","String","split","header","firstDataPointPerPlace","line","date","place","newCases","newDeaths","totalCases","totalDeaths","Number","push","Date","toISOString","substring","customStyles","option","provided","isSelected","App","country","axios","get","res","parsed","labels","Object","keys","key","dataForCountry","getData","options","onChange","_onChange","defaultValue","styles","href","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.2b628f85.chunk.js","sourcesContent":["import React, { Component } from \"react\";\nimport \"./App.css\";\nimport axios from \"axios\";\nimport CoronaChart from \"./components/line-chart\";\n\nimport Select from 'react-select';\n\nconst endpoint = \"https://raw.githubusercontent.com/owid/covid-19-data/master/public/data/ecdc/full_data.csv\";\nconst initialCountrySelect = {value: 'Italy', label: 'Italy'};\nconst initialCountry = initialCountrySelect.value\nconst countries = [initialCountrySelect];\n\nlet data\n\nconst parseData = (input) => {\n  if (data) {\n    return data\n  }\n  const extracted = {}\n  const dataPerLine = String(input).split('\\n')\n  let header = true\n  const firstDataPointPerPlace = {}\n  for (const line of dataPerLine) {\n    if (header) {\n      header = false\n      continue\n    }\n    const [date, place, newCases, newDeaths, totalCases, totalDeaths] = line.split(',')\n    if (!place) {\n      continue\n    }\n    if (!extracted[place]) {\n      extracted[place] = []\n    }\n    if (!firstDataPointPerPlace[place]){\n      if (Number(newCases) === 0 &&\n          Number(newDeaths) === 0 &&\n          Number(totalCases) === 0 &&\n          Number(totalDeaths) === 0) {\n        continue\n      } else {\n        firstDataPointPerPlace[place] = true\n      }\n    }\n    extracted[place].push({\n        date: new Date(date).toISOString().substring(0,10),\n        newCases: Number(newCases) === 0 ? null : Number(newCases),\n        newDeaths: Number(newDeaths) === 0 ? null : Number(newDeaths),\n        totalCases: Number(totalCases) === 0 ? null :Number(totalCases),\n        totalDeaths: Number(totalDeaths) === 0 ? null :Number(totalDeaths)\n      })\n  }\n\n  data = extracted\n  return data\n}\n\nconst customStyles = {\n  option: (provided, state) => ({\n    ...provided,\n    color: state.isSelected ? 'orange' : 'black',\n  })\n}\n\nclass App extends Component {\n  state = {}\n\n  async getData(country) {\n    const res = await axios.get(`${endpoint}`);\n    const parsed = parseData(res.data)\n    const labels = Object.keys(parsed).map(key => ({value: key, label: key}))\n    this.setState({dataForCountry: parsed[country], countries: labels, country});\n  }\n\n  async componentDidMount() {\n    await this.getData(initialCountry);\n\n  }\n\n  async _onChange(country) {\n    await this.getData(country.value)\n  }\n\n  render() {\n    return (\n      <div className=\"App\">\n        <header className=\"App-header\">\n          <div style={{width: '40%'}}>\n            <Select options={this.state.countries || countries} onChange={input => this._onChange(input)} defaultValue={this.state.country || initialCountrySelect} styles={customStyles} />\n          </div>\n          <div style={{width: '98%', height: '80%'}}>\n            <CoronaChart dataPoints={this.state.dataForCountry} /> \n          </div>\n        </header>\n        <div className=\"Bottom-right\">Sources: ECDC via <a href={endpoint}>OWID</a> under <a href=\"https://creativecommons.org/licenses/by/4.0/\">CC BY 4.0</a></div>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","import React, { Component } from \"react\";\nimport {\n  Legend,\n  Label,\n  Line,\n  LineChart,\n  ResponsiveContainer,\n  Surface, \n  Symbols,\n  Tooltip,\n  XAxis,\n  YAxis\n} from \"recharts\";\n\nconst prioritizedDataKeys = ['totalCases', 'newCases', 'totalDeaths','newDeaths']\n\nclass CoronaChart extends Component {\n  constructor(props) {\n    super(props)\n    this.state = { disabled: ['totalCases', 'totalDeaths'], chartLines: [\n      { dataKey: 'newCases', color: '#ff7300', label: 'Daily cases'},\n      { dataKey: 'newDeaths', color: '#ffff00', label: 'Daily deaths'},\n      { dataKey: 'totalCases', color: '#ff00ff', label: 'Total cases'},\n      { dataKey: 'totalDeaths', color: '#34c3eb', label: 'Total Deaths'}\n    ],\n    scale: 'linear'}\n  }\n\n  handleClick(dataKey) {\n    if (this.state.disabled.includes(dataKey)) {\n      this.setState({disabled: this.state.disabled.filter(obj => obj !== dataKey)})\n    } else {\n      this.setState({ disabled: this.state.disabled.concat(dataKey) });\n    }\n  }\n\n\n  handleOptionChange(scale) {\n    this.setState({\n      scale\n    });\n    this.forceUpdate()\n  }\n\n\n\n  renderCustomizedLegend = ({ payload }) => {\n    return (\n      <div className=\"customized-legend\" style={{marginBottom: 30}}>\n        {payload.map(entry => {\n          const { dataKey, color, label } = entry;\n          const active = this.state.disabled.includes(dataKey);\n          const style = {\n            marginRight: 10,\n            color: active ? \"#000\" : \"#AAA\"\n          };\n\n          return (\n            <span\n              className=\"legend-item\"\n              onClick={() => this.handleClick(dataKey)}\n              style={style}\n            >\n              <Surface width={20} height={20}>\n                <Symbols cx={10} cy={10} type=\"circle\" size={50} fill={color} />\n                {active && (\n                  <Symbols\n                    cx={10}\n                    cy={10}\n                    type=\"circle\"\n                    size={25}\n                    fill={\"#FFF\"}\n                  />\n                )}\n              </Surface>\n              <span>{label}</span>\n            </span>\n          );\n        })}\n      </div>\n    );\n  };\n\n  render() {\n    const { dataPoints } = this.props;\n\n    if (!dataPoints) {\n      return null;\n    }\n\n    const data = dataPoints\n\n    return (\n      <div>\n        <div>\n          <span\n            onClick={() => this.handleOptionChange(\"linear\")}>\n            <input type=\"radio\" id=\"linear\" name=\"scale\" value=\"linear\" checked={this.state.scale === 'linear'} />\n            <span style={{color: \"#AAA\"}}>Linear</span>\n          </span>\n          <span\n            onClick={() => this.handleOptionChange(\"log\")}>\n            <input type=\"radio\" id=\"log\" name=\"scale\" value=\"log\" checked={this.state.scale === 'log'}/>\n            <span style={{color: \"#AAA\"}}>Log</span>\n          </span>\n        </div>\n      <ResponsiveContainer height={800} className=\"chart-container\">\n        <LineChart\n          width={800}\n          height={800}\n          data={data}\n          margin={{ top: 25, right: 25, left: 40, bottom: 25 }}\n          >\n          {\n            this.state.chartLines.filter(chartLine => !this.state.disabled.includes(chartLine.dataKey)).map(chartLine =>\n              <Line\n              connectNulls\n              name={chartLine.label}\n              type=\"monotone\"\n              dataKey={chartLine.dataKey}\n              stroke={chartLine.color}\n              yAxisId={0}\n              />\n              )\n            }\n          <XAxis\n            dataKey=\"date\"\n            textAnchor=\"end\"\n            tick={{ angle: -70, fontSize: 20 }}\n            height={225}\n            padding={{right: 3, left: 3}}\n            />\n\n          <YAxis\n            dataKey={prioritizedDataKeys.filter(dataKey => !this.state.disabled.includes(dataKey))[0]}\n            domain={this.state.scale === 'log' ? [1, 'dataMax'] : [0, 'dataMax']}\n            tick={{ fontSize: 20 }}\n            width={40}\n            scale={this.state.scale}\n            allowDataOverflow\n            padding={{top: 3, bottom: 3}}\n            >\n             {/* <Label value=\"Persons\" angle={-90} position=\"insideBottomLeft\" offset={1} style={{ fontSize: '80%', fill: 'rgba(0, 204, 102, 0.70)' }}></Label> */}\n          />\n          </YAxis>\n          <Tooltip\n            formatter={(value, name) => (value === null) ? 0 : value}\n            filterNull={false}\n            wrapperStyle={{\n              borderColor: \"white\",\n              boxShadow: \"2px 2px 3px 0px rgb(204, 204, 204)\"\n            }}\n            contentStyle={{ backgroundColor: \"rgba(255, 255, 255, 0.8)\" }}\n            labelStyle={{ fontWeight: \"bold\", color: \"#666666\" }}\n            />\n          <Legend verticalAlign=\"top\" height={45} content={this.renderCustomizedLegend} \n            payload={this.state.chartLines}/>\n        </LineChart>\n      </ResponsiveContainer>\n    </div>\n    );\n  }\n}\n\nexport default CoronaChart;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(/^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/)\n)\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href)\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config)\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          )\n        })\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config)\n      }\n    })\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing\n        if (installingWorker == null) {\n          return\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              )\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration)\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.')\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration)\n              }\n            }\n          }\n        }\n      }\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error)\n    })\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type')\n      if (response.status === 404 || (contentType != null && contentType.indexOf('javascript') === -1)) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload()\n          })\n        })\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config)\n      }\n    })\n    .catch(() => {\n      console.log('No internet connection found. App is running in offline mode.')\n    })\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister()\n      })\n      .catch(error => {\n        console.error(error.message)\n      })\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}